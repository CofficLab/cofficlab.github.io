---
interface Props {
  label: string;
}

const { label } = Astro.props;
---

<div class="tab-panel invisible h-0" data-tab-content data-tab-label={label}>
  <slot />
</div>

<script>
  interface TabChangeEvent extends CustomEvent {
    detail: {
      label: string;
    };
  }

  function setupTabItemListeners() {
    // 找到所有的 tab panels
    const allPanels = document.querySelectorAll('[data-tab-content]');

    allPanels.forEach((panel) => {
      if (!(panel instanceof HTMLElement)) return;

      const parentContainer = panel.closest('.tabs-container');
      if (!parentContainer) return;

      const handleTabChange = (e: Event) => {
        const event = e as TabChangeEvent;
        const selectedLabel = event.detail.label;

        // 只处理当前 tabs container 内的内容
        const containerPanels =
          parentContainer.querySelectorAll('[data-tab-content]');
        containerPanels.forEach((content) => {
          if (content instanceof HTMLElement) {
            const contentLabel = content.dataset.tabLabel;
            if (contentLabel === selectedLabel) {
              content.classList.remove('invisible', 'h-0');
            } else {
              content.classList.add('invisible', 'h-0');
            }
          }
        });
      };

      // 为每个 panel 的父容器添加事件监听
      parentContainer.removeEventListener('tab-change', handleTabChange);
      parentContainer.addEventListener('tab-change', handleTabChange);
    });
  }

  // 确保在每次页面加载时都设置监听器
  document.addEventListener('astro:page-load', setupTabItemListeners);
</script>
